{% extends 'partials/base.html.twig' %}

{% if admin.route %}
    {% set context = admin.page(true) %}
{% endif %}

{% block titlebar %}
    <h1><i class="fa fa-fw fa-file-text-o"></i> {{ "PLUGIN_ADVANCED_COMMENTS.COMMENTS"|tu }}</h1>
{% endblock %}

{% block content %}
    {% set days = grav.config.plugins['advanced-comments'].admin_comment_day_limit %}
    <style>
        .pages-list .row {
            padding-right: 1rem;
        }

        .pages-list .row p.page-route {
            margin: 0px 0 10px 0px;
        }

        th { background: #d9d9d9; }

        .center {
            margin: 0 auto;
            text-align: center;
            display: block;
        }

        .button:active { margin: 0 auto;}

        .comment-spinner {
            display: none;
        }

        .fa {
            pointer-events:none;
        }
    </style>

    <script>
        $(function() {
            var currentPage = 0;
            var totalRetrieved = {{ grav.twig.comments.comments|length }};
            var currentUri = '{{ grav.config.plugins.admin.route }}/advanced-comments';

            $(document).on('click tap', '.js__load-more', function(event) {
                $.ajax({
                    url: currentUri + '/page:' + (currentPage + 1),
                    dataType: 'json',
                    success: function(response) {
                        currentPage = parseInt(response.page);

                        response.comments.forEach(function(comment) {
                            let html = '<tr data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<td class="comment-author">' + comment.author + '</td>' +
                                '<td class="comment-text">' + comment.text + '</td>' +
                                '<td class="comment-details"><strong>Page</strong>: ' + comment.pageTitle + '<br>' +
                                '<strong>Date</strong>: ' + comment.date + '</td><td class="comment-approved">';

                            if (comment.approved == '1') {
                                html += "{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_APPROVED'|t }}";
                            } else if (comment.approved == '0') {
                                html += "{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_REJECTED'|t }}";
                            } else {
                                html += "{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_PENDING'|t }}";
                            }

                            html += '</td><td>';

                            html += '<button type="button" class="button comment-approve-button" data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<i class="fa fa-thumbs-up"></i>' + '</button> ';
                            html += '<button type="button" class="button comment-reject-button" data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<i class="fa fa-thumbs-down"></i>' + '</button> ';
                            html += '<button type="button" class="button comment-edit-modal-button" data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<i class="fa fa-pencil"></i>' + '</button> ';
                            html += '<button type="button" class="button reply-edit-modal-button" data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<i class="fa fa-reply"></i>' + '</button> ';
                            html += '<button type="button" class="button danger comment-delete-button" data-page="' + comment.page + '" data-index="' + comment.index + '">' +
                                '<i class="fa fa-trash"></i>' + '</button>';

                            html += '</td></tr>';

                            $('.js__comments-container').append(html);
                        })

                        totalRetrieved += response.totalRetrieved;

                        $('.totalRetrieved').html(totalRetrieved);
                        $('.totalAvailable').html(response.totalAvailable);

                        if (totalRetrieved == response.totalAvailable) {
                            $('.js__load-more').hide();
                        }
                    },
                    error: function() {
                        alert('Unexpected error');
                    }
                });
            });

            $(document).on('click tap', '.comment-approve-button', function(event) {
                let page = $(event.target).data('page');
                let index = $(event.target).data('index');

                if (typeof(page) == 'undefined' || typeof(index) == 'undefined') {
                    return;
                }

                updateCommentStatus($(event.target), page, index, 1);
            });

            $(document).on('click tap', '.comment-reject-button', function(event) {
                let page = $(event.target).data('page');
                let index = $(event.target).data('index');

                if (typeof(page) == 'undefined' || typeof(index) == 'undefined') {
                    return;
                }

                updateCommentStatus($(event.target), page, index, 0);
            });

            $(document).on('click tap', '.comment-edit-modal-button', function(event) {
                let page = $(event.target).data('page');
                let index = $(event.target).data('index');

                if (typeof(page) == 'undefined' || typeof(index) == 'undefined') {
                    return;
                }

                let modal = $('[data-remodal-id="commentEditModal"]');

                modal.find('.grav-loading').show();
                modal.find('.comment-form, .button-bar').hide();
                $.remodal.lookup[modal.data('remodal')].open();

                let url = currentUri + '?page=' + encodeURIComponent(page) + '&index=' + index + '&task=editComment';

                $.ajax({
                    url: url,
                    dataType: 'json',
                    success: function(res) {
                        modal.find('.grav-loading').hide();
                        modal.find('.button-bar').show();

                        if (!res.comment) {
                            modal.find('.comment-form, .comment-save-button').hide();
                            modal.find('.error-message').html('<p>{{ 'PLUGIN_ADVANCED_COMMENTS.COMMENT_NOT_FOUND'|t }}</p>');

                            return;
                        }

                        let comment = res.comment;

                        modal.find('input[name="author"]').val(comment.author);
                        modal.find('input[name="email"]').val(comment.email);
                        modal.find('textarea[name="text"]').val(comment.text);
                        modal.find('#commentEditFormPage').val(page);
                        modal.find('#commentEditFormIndex').val(index);

                        modal.find('.comment-form, .comment-save-button').show();
                    }
                });
            });

            $(document).on('click tap', '.reply-edit-modal-button', function(event) {
                let page = $(event.target).data('page');
                let index = $(event.target).data('index');

                if (typeof(page) == 'undefined' || typeof(index) == 'undefined') {
                    return;
                }

                let modal = $('[data-remodal-id="replyEditModal"]');

                modal.find('.grav-loading').show();
                modal.find('.reply-form, .button-bar').hide();
                $.remodal.lookup[modal.data('remodal')].open();

                let url = currentUri + '?page=' + encodeURIComponent(page) + '&index=' + index + '&task=editComment';

                $.ajax({
                    url: url,
                    dataType: 'json',
                    success: function(res) {
                        modal.find('.grav-loading').hide();
                        modal.find('.button-bar').show();

                        if (!res.comment) {
                            modal.find('.comment-form, .comment-save-button').hide();
                            modal.find('.error-message').html('<p>{{ 'PLUGIN_ADVANCED_COMMENTS.COMMENT_NOT_FOUND'|t }}</p>');

                            return;
                        }

                        let comment = res.comment;

                        let author = '';
                        let text = '';

                        if (typeof(comment.replies) != 'undefined' && typeof(comment.replies[0]) != 'undefined') {
                            author = comment.replies[0].author ?? '';
                            text = comment.replies[0].text ?? '';
                        }

                        modal.find('input[name="author"]').val(author);
                        modal.find('textarea[name="text"]').val(text);
                        modal.find('#replyEditFormPage').val(page);
                        modal.find('#replyEditFormIndex').val(index);

                        modal.find('.reply-form, .reply-save-button').show();
                    }
                });
            });

            $(document).on('click tap', '.reply-save-button', function(e) {
                let form = $('#replyEditForm');
                let modal = $('[data-remodal-id="replyEditModal"]');
                let saveButton = $(this);
                let closeButton = modal.find('.reply-close-button');

                closeButton.hide();

                saveButton.find('.fa').each(function(i, e) {
                    let icon = $(e);

                    if (icon.hasClass('fa-spin')) {
                        icon.attr('style', 'display: inline-block');
                    } else {
                        icon.hide();
                    }
                });

                saveButton.attr('disabled', 'disabled');

                $.ajax({
                    url: currentUri + '?task=saveReply',
                    method: 'post',
                    dataType: 'json',
                    data: form.serialize(),
                    success: function(res) {
                        if (typeof(res.status) != 'undefined' && res.status == 'success') {
                            $.remodal.lookup[modal.data('remodal')].close();
                        } else {
                            resetReplyModal();
                        }

                        if (typeof(res.message) != 'undefined' && res.message != '') {
                            alert(res.message);
                        }
                    }
                });
            });

            $(document).on('click tap', '.comment-delete-modal-button', function(event) {
                let page = $(event.target).data('page');
                let index = $(event.target).data('index');

                if (typeof(page) == 'undefined' || typeof(index) == 'undefined') {
                    return;
                }

                let modal = $('[data-remodal-id="commentDeletionModal"]');
                modal.find('#commentDeletionFormPage').val(page);
                modal.find('#commentDeletionFormIndex').val(index);

                $.remodal.lookup[modal.data('remodal')].open();
            });

            $(document).on('closed', '[data-remodal-id="commentEditModal"]', function (e) {
                resetCommentModal();
            });

            $(document).on('closed', '[data-remodal-id="replyEditModal"]', function (e) {
                resetReplyModal();
            });

            $(document).on('click tap', '.comment-save-button', function(e) {
                let form = $('#commentEditForm');
                let modal = $('[data-remodal-id="commentEditModal"]');
                let saveButton = $(this);
                let closeButton = modal.find('.comment-close-button');

                closeButton.hide();

                saveButton.find('.fa').each(function(i, e) {
                    let icon = $(e);

                    if (icon.hasClass('fa-spin')) {
                        icon.attr('style', 'display: inline-block');
                    } else {
                        icon.hide();
                    }
                });

                saveButton.attr('disabled', 'disabled');

                $.ajax({
                    url: currentUri + '?task=editComment',
                    method: 'post',
                    dataType: 'json',
                    data: form.serialize(),
                    success: function(res) {
                        if (typeof(res.status) != 'undefined' && res.status == 'success') {
                            $.remodal.lookup[modal.data('remodal')].close();
                        } else {
                            resetCommentModal();
                        }

                        if (typeof(res.message) != 'undefined' && res.message != '') {
                            alert(res.message);
                        }

                        if (typeof(res.data) != 'undefined' && res.data) {
                            let page = form.find('input[name="page"]').val();
                            let index = form.find('input[name="index"]').val();

                            $('#commentTable tbody tr').each(function (i, e) {
                                let tr = $(e);
                                let trPage = tr.data('page');
                                let trIndex = tr.data('index');

                                if (page == trPage && index == trIndex) {
                                    tr.find('.comment-author').html(res.data.author);
                                    tr.find('.comment-text').html(res.data.text);
                                    return false;
                                }
                            });
                        }
                    }
                });
            });

            $(document).on('click tap', '.comment-delete-button', function(event) {
                let form = $('#commentDeletionForm');
                let modal = $('[data-remodal-id="commentDeletionModal"]');
                let confirmButton = $(this);
                let closeButton = modal.find('.comment-close-button');

                closeButton.hide();

                let icons = confirmButton.find('.fa');

                icons.each(function(i, e) {
                    let icon = $(e);

                    if (icon.hasClass('fa-spin')) {
                        icon.attr('style', 'display: inline-block');
                    } else {
                        icon.hide();
                    }
                });

                confirmButton.attr('disabled', 'disabled');

                $.ajax({
                    url: currentUri + '?task=deleteComment',
                    method: 'post',
                    dataType: 'json',
                    data: form.serialize(),
                    success: function(res) {
                        if (typeof(res.status) != 'undefined' && res.status == 'success') {
                            window.location.reload();
                        } else {
                            icons.each(function(i, e) {
                                let icon = $(e);

                                if (icon.hasClass('fa-spin')) {
                                    icon.hide();
                                } else {
                                    icon.attr('style', 'display: inline-block');
                                }
                            });

                            confirmButton.attr('disabled', null);
                            closeButton.show();
                        }

                        if (typeof(res.message) != 'undefined' && res.message != '') {
                            alert(res.message);
                        }
                    }
                });
            });
        });

        function resetCommentModal() {
            let modal = $('[data-remodal-id="commentEditModal"]');
            let saveButton = modal.find('.comment-save-button');
            let closeButton = modal.find('.comment-close-button');

            saveButton.attr('disabled', null);

            modal.find('.comment-save-button .fa').each(function(i, e) {
                let icon = $(e);

                if (icon.hasClass('fa-spin')) {
                    icon.hide();
                } else {
                    icon.attr('style', 'display: inline-block');
                }
            });

            closeButton.show();
        }

        function resetReplyModal() {
            let modal = $('[data-remodal-id="replyEditModal"]');
            let saveButton = modal.find('.reply-save-button');
            let closeButton = modal.find('.reply-close-button');

            saveButton.attr('disabled', null);

            modal.find('.reply-save-button .fa').each(function(i, e) {
                let icon = $(e);

                if (icon.hasClass('fa-spin')) {
                    icon.hide();
                } else {
                    icon.attr('style', 'display: inline-block');
                }
            });

            closeButton.show();
        }

        function updateCommentStatus(button, page, index, status) {
            let icons = button.find('.fa');

            let currentUri = '{{ grav.config.plugins.admin.route }}/advanced-comments';

            $.ajax({
                url: currentUri + '?task=updateCommentStatus',
                method: 'post',
                dataType: 'json',
                data: {
                    'page': page,
                    'index': index,
                    'admin-nonce': $('input[name="admin-nonce"]').val(),
                    'status': status
                },
                success: function(res) {
                    if (typeof(res.message) != 'undefined' && res.message != '') {
                        alert(res.message);
                    }

                    if (typeof(res.data) != 'undefined' && res.data) {
                        $('#commentTable tbody tr').each(function (i, e) {
                            let tr = $(e);
                            let trPage = tr.data('page');
                            let trIndex = tr.data('index');

                            if (page == trPage && index == trIndex) {
                                let status = '{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_PENDING'|t }}';

                                if (res.data.approved == '1') {
                                    status = '{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_APPROVED'|t }}';
                                } else if (res.data.approved == '0') {
                                    status = '{{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_REJECTED'|t }}';
                                }

                                tr.find('.comment-approved').html(status);

                                return false;
                            }
                        });
                    }

                    icons.each(function(i, e) {
                        let icon = $(e);

                        if (icon.hasClass('fa-spin')) {
                            icon.hide();
                        } else {
                            icon.attr('style', 'display: inline-block');
                        }
                    });
                }
            });
        }
    </script>

    <h1>Comments in the last {{ days }} days</h1>

    <div class="admin-block">
        <table id="commentTable">
            <thead>
                <tr>
                    <th class="author">Author</th>
                    <th class="comment">Comment</th>
                    <th class="details">Details</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody class="js__comments-container">
                {% for comment in grav.twig.comments.comments %}
                    <tr data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                        <td class="comment-author">
                            {{comment.author}}
                            {% if comment.email %}
                                <br>{{ comment.email }}
                            {% endif %}
                        </td>
                        <td class="comment-text">{{comment.text|striptags('<p><b><u><i><a><br>')|raw}}</td>
                        <td class="comment-details">
                            <strong>Page</strong>: {{comment.pageTitle}}<br>
                            <strong>Date</strong>: {{comment.date}}
                        </td>
                        <td class="comment-approved">
                            {% if comment.approved == '1' %}
                                {{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_APPROVED'|t }}
                            {% elseif comment.approved == '0' %}
                                {{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_REJECTED'|t }}
                            {% else %}
                                {{ 'PLUGIN_ADVANCED_COMMENTS.STATUS_PENDING'|t }}
                            {% endif %}
                        </td>
                        <td>
                            <button type="button" class="button comment-approve-button" data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                                <i class="fa fa-thumbs-up"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i>
                            </button>
                            <button type="button" class="button comment-reject-button" data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                                <i class="fa fa-thumbs-down"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i>
                            </button>
                            <button type="button" class="button comment-edit-modal-button" data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button type="button" class="button reply-edit-modal-button" data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                                <i class="fa fa-reply"></i>
                            </button>
                            <button type="button" class="button danger comment-delete-modal-button" data-page="{{ comment.page }}" data-index="{{ comment.index }}">
                                <i class="fa fa-trash"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i>
                            </button>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>

        {% if grav.twig.comments.totalRetrieved < grav.twig.comments.totalAvailable %}
            <button type="button" class="button center js__load-more">
                Load more
            </button>
        {% endif %}

        <p class="center">Showing <span class="totalRetrieved">{{grav.twig.comments.totalRetrieved}}</span> comments of <span class="totalAvailable">{{grav.twig.comments.totalAvailable}}</span></p>
    </div>

    <div class="remodal" data-remodal-id="commentEditModal" data-remodal-options="hashTracking: false, stack: false, closeOnOutsideClick: false">
        <form id="commentEditForm">
            <div class="grav-loading"><div class="grav-loader">Loading...</div></div>
            <div class="error-message"></div>
            <div class="comment-form">
                <h1></h1>

                <div class="form-field grid">
                    <div class="form-label block size-1-4">
                        <label>{{ "PLUGIN_ADVANCED_COMMENTS.NAME_LABEL"|t }}</label>
                    </div>
                    <div class="form-data block size-3-4">
                        <input type="text" name="author">
                    </div>
                </div>

                <div class="form-field grid">
                    <div class="form-label block size-1-4">
                        <label>{{ "PLUGIN_ADVANCED_COMMENTS.EMAIL_LABEL"|t }}</label>
                    </div>
                    <div class="form-data block size-3-4">
                        <input type="text" name="email">
                    </div>
                </div>

                <div class="form-field grid">
                    <div class="form-label block size-1-4">
                        <label>{{ "PLUGIN_ADVANCED_COMMENTS.MESSAGE_LABEL"|t }}</label>
                    </div>
                    <div class="form-data block size-3-4">
                        <textarea rows="5" name="text"></textarea>
                    </div>
                </div>

                <input type="hidden" name="page" id="commentEditFormPage">
                <input type="hidden" name="index" id="commentEditFormIndex">
            </div>
            <div class="button-bar">
                <a class="button secondary comment-close-button remodal-cancel" data-remodal-action="cancel" href="#"><i class="fa fa-fw fa-close"></i> {{ "PLUGIN_ADMIN.CLOSE"|t }}</a>
                <a class="button comment-save-button" href="#"><i class="fa fa-fw fa-check"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i> {{ "PLUGIN_ADMIN.SAVE"|t }}</a>
            </div>

            {{ nonce_field('admin-form', 'admin-nonce')|raw }}
        </form>
    </div>

    <div class="remodal" data-remodal-id="replyEditModal" data-remodal-options="hashTracking: false, stack: false, closeOnOutsideClick: false">
        <form id="replyEditForm">
            <div class="grav-loading"><div class="grav-loader">Loading...</div></div>
            <div class="error-message"></div>
            <div class="reply-form">
                <h1>{{ "PLUGIN_ADVANCED_COMMENTS.REPLY"|t }}</h1>

                <div class="form-field grid">
                    <div class="form-label block size-1-4">
                        <label>{{ "PLUGIN_ADVANCED_COMMENTS.NAME_LABEL"|t }}</label>
                    </div>
                    <div class="form-data block size-3-4">
                        <input type="text" name="author">
                    </div>
                </div>

                <div class="form-field grid">
                    <div class="form-label block size-1-4">
                        <label>{{ "PLUGIN_ADVANCED_COMMENTS.REPLY_LABEL"|t }}</label>
                    </div>
                    <div class="form-data block size-3-4">
                        <textarea rows="5" name="text"></textarea>
                    </div>
                </div>

                <input type="hidden" name="page" id="replyEditFormPage">
                <input type="hidden" name="index" id="replyEditFormIndex">
            </div>
            <div class="button-bar">
                <a class="button secondary reply-close-button remodal-cancel" data-remodal-action="cancel" href="#"><i class="fa fa-fw fa-close"></i> {{ "PLUGIN_ADMIN.CLOSE"|t }}</a>
                <a class="button reply-save-button" href="#"><i class="fa fa-fw fa-check"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i> {{ "PLUGIN_ADMIN.SAVE"|t }}</a>
            </div>

            {{ nonce_field('admin-form', 'admin-nonce')|raw }}
        </form>
    </div>

    <div class="remodal" data-remodal-id="commentDeletionModal" data-remodal-options="hashTracking: false, stack: false, closeOnOutsideClick: false">
        <form id="commentDeletionForm">
            <p>{{ "PLUGIN_ADVANCED_COMMENTS.DELETION_CONFIRMATION"|t }}</p>
            <div class="button-bar">
                <a class="button secondary comment-close-button remodal-cancel" data-remodal-action="cancel" href="#"><i class="fa fa-fw fa-close"></i> {{ "PLUGIN_ADMIN.CANCEL"|t }}</a>
                <a class="button danger comment-delete-button" href="#"><i class="fa fa-fw fa-check"></i><i class="fa fa-circle-o-notch fa-spin fa-fw comment-spinner"></i> {{ "PLUGIN_ADMIN.DELETE"|t }}</a>
            </div>

            <input type="hidden" name="page" id="commentDeletionFormPage">
            <input type="hidden" name="index" id="commentDeletionFormIndex">

            {{ nonce_field('admin-form', 'admin-nonce')|raw }}
        </form>
    </div>

    {% if grav.twig.pages %}
        <h1>Recently commented pages</h1>

        <div class="admin-block">
            <table>
                <tbody class="js__pages-container">
                    <tr class="h">
                        <th class="page">Page</th>
                        <th class="number-of-comments">Number of comments</th>
                        <th class="last-comment-date">Last commented on</th>
                    </tr>
                    {% for page in grav.twig.pages %}
                        <tr>
                            <td class="page">{{page.title}}</td>
                            <td class="number-of-comments">{{page.commentsCount}}</td>
                            <td class="last-comment-date">{{page.lastCommentDate}}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% endif %}

{% endblock %}
